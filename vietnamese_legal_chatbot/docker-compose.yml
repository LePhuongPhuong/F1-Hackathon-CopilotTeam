# Vietnamese Legal AI Chatbot - Docker Compose Configuration
# Cấu hình Docker Compose cho Chatbot AI Pháp lý Việt Nam

version: '3.8'

services:
  # FastAPI Backend Service
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: vietnamese_legal_api
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/vietnamese_legal_db
      - ENVIRONMENT=development
    volumes:
      - ./app:/app
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - vietnamese_legal_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit Frontend Service
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: vietnamese_legal_frontend
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://backend:8000
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    volumes:
      - ./app:/app
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - backend
    networks:
      - vietnamese_legal_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: vietnamese_legal_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - vietnamese_legal_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for User Management and Chat History
  postgres:
    image: postgres:15-alpine
    container_name: vietnamese_legal_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=vietnamese_legal_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - vietnamese_legal_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vietnamese_legal_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - vietnamese_legal_network
    restart: unless-stopped

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: vietnamese_legal_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - vietnamese_legal_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: vietnamese_legal_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - vietnamese_legal_network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  vietnamese_legal_network:
    driver: bridge
    name: vietnamese_legal_network

volumes:
  redis_data:
    name: vietnamese_legal_redis_data
  postgres_data:
    name: vietnamese_legal_postgres_data
  prometheus_data:
    name: vietnamese_legal_prometheus_data
  grafana_data:
    name: vietnamese_legal_grafana_data
