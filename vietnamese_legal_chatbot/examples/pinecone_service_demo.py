"""
Example usage of PineconeService for Vietnamese Legal AI Chatbot
V√≠ d·ª• s·ª≠ d·ª•ng PineconeService cho Chatbot AI Ph√°p l√Ω Vi·ªát Nam

This script demonstrates how to use the PineconeService class to:
1. Initialize the service
2. Process and upsert legal documents
3. Search for similar documents
4. Manage document metadata

Script n√†y minh h·ªça c√°ch s·ª≠ d·ª•ng class PineconeService ƒë·ªÉ:
1. Kh·ªüi t·∫°o d·ªãch v·ª•
2. X·ª≠ l√Ω v√† upsert t√†i li·ªáu ph√°p l√Ω  
3. T√¨m ki·∫øm t√†i li·ªáu t∆∞∆°ng t·ª±
4. Qu·∫£n l√Ω metadata t√†i li·ªáu
"""

import os
import logging
from typing import List, Dict, Any
import sys
import asyncio

# Add the app directory to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from app.services.pinecone_service import (
    PineconeService,
    PineconeServiceFactory,
    LegalDocumentProcessor,
    VietnameseLegalMetadataBuilder,
    DocumentMetadata,
    VectorSearchResult,
    PineconeServiceError
)
from app.utils.config import Settings

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def setup_environment():
    """
    Setup environment variables for testing
    Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng cho testing
    """
    # Set environment variables if not already set
    if not os.getenv("PINECONE_API_KEY"):
        os.environ["PINECONE_API_KEY"] = "your-pinecone-api-key-here"
    
    if not os.getenv("PINECONE_ENVIRONMENT"):
        os.environ["PINECONE_ENVIRONMENT"] = "us-west1-gcp"
    
    if not os.getenv("OPENAI_API_KEY"):
        os.environ["OPENAI_API_KEY"] = "your-openai-api-key-here"
    
    if not os.getenv("PINECONE_INDEX_NAME"):
        os.environ["PINECONE_INDEX_NAME"] = "vietnamese-legal-docs-demo"


def create_sample_legal_documents() -> List[Dict[str, Any]]:
    """
    T·∫°o d·ªØ li·ªáu m·∫´u cho t√†i li·ªáu ph√°p l√Ω Vi·ªát Nam
    Create sample Vietnamese legal documents data
    
    Returns:
        List[Dict[str, Any]]: Danh s√°ch t√†i li·ªáu m·∫´u
    """
    sample_documents = [
        {
            "title": "B·ªô lu·∫≠t D√¢n s·ª± 2015",
            "content": """
            CH∆Ø∆†NG I - QUY ƒê·ªäNH CHUNG
            
            ƒêi·ªÅu 1. Ph·∫°m vi ƒëi·ªÅu ch·ªânh
            1. B·ªô lu·∫≠t n√†y quy ƒë·ªãnh v·ªÅ quan h·ªá d√¢n s·ª±.
            2. Quan h·ªá d√¢n s·ª± l√† quan h·ªá t√†i s·∫£n v√† quan h·ªá nh√¢n th√¢n gi·ªØa c√°c ch·ªß th·ªÉ trong m·ªôt v·ªã tr√≠ b√¨nh ƒë·∫≥ng.
            3. Quan h·ªá t√†i s·∫£n l√† quan h·ªá ph√°t sinh v·ªÅ t√†i s·∫£n.
            
            ƒêi·ªÅu 2. Nguy√™n t·∫Øc c∆° b·∫£n c·ªßa ph√°p lu·∫≠t d√¢n s·ª±
            1. B√¨nh ƒë·∫≥ng trong quan h·ªá d√¢n s·ª±.
            2. T·ª± do, t·ª± nguy·ªán th·ªèa thu·∫≠n trong quan h·ªá d√¢n s·ª±.
            3. Thi·ªán ch√≠ trong vi·ªác th·ª±c hi·ªán quy·ªÅn d√¢n s·ª±, nghƒ©a v·ª• d√¢n s·ª±.
            """,
            "legal_domain": "dan_su",
            "document_type": "bo_luat",
            "issuing_authority": "quoc_hoi",
            "effective_date": "2017-01-01"
        },
        {
            "title": "B·ªô lu·∫≠t H√¨nh s·ª± 2015",
            "content": """
            CH∆Ø∆†NG I - NH·ªÆNG QUY ƒê·ªäNH CHUNG
            
            ƒêi·ªÅu 1. Nhi·ªám v·ª• c·ªßa B·ªô lu·∫≠t h√¨nh s·ª±
            B·∫£o v·ªá ƒë·ªôc l·∫≠p, ch·ªß quy·ªÅn, th·ªëng nh·∫•t, to√†n v·∫πn l√£nh th·ªï c·ªßa T·ªï qu·ªëc, b·∫£o v·ªá ch·∫ø ƒë·ªô ch√≠nh tr·ªã.
            
            ƒêi·ªÅu 2. CƒÉn c·ª© tr√°ch nhi·ªám h√¨nh s·ª±
            1. Ch·ªâ ng∆∞·ªùi n√†o ph·∫°m t·ªôi m·ªõi ph·∫£i ch·ªãu tr√°ch nhi·ªám h√¨nh s·ª±.
            2. Vi·ªác x√°c ƒë·ªãnh t·ªôi ph·∫°m v√† h√¨nh ph·∫°t ph·∫£i cƒÉn c·ª© v√†o B·ªô lu·∫≠t n√†y v√† lu·∫≠t kh√°c c√≥ quy ƒë·ªãnh v·ªÅ t·ªôi ph·∫°m v√† h√¨nh ph·∫°t.
            """,
            "legal_domain": "hinh_su", 
            "document_type": "bo_luat",
            "issuing_authority": "quoc_hoi",
            "effective_date": "2018-01-01"
        },
        {
            "title": "B·ªô lu·∫≠t Lao ƒë·ªông 2019",
            "content": """
            CH∆Ø∆†NG I - QUY ƒê·ªäNH CHUNG
            
            ƒêi·ªÅu 1. Ph·∫°m vi ƒëi·ªÅu ch·ªânh
            1. B·ªô lu·∫≠t n√†y quy ƒë·ªãnh v·ªÅ quan h·ªá lao ƒë·ªông, quan h·ªá g·∫Øn li·ªÅn v·ªõi quan h·ªá lao ƒë·ªông.
            2. Quan h·ªá lao ƒë·ªông l√† quan h·ªá x√£ h·ªôi ph√°t sinh trong qu√° tr√¨nh tuy·ªÉn d·ª•ng v√† s·ª≠ d·ª•ng lao ƒë·ªông.
            
            ƒêi·ªÅu 2. ƒê·ªëi t∆∞·ª£ng √°p d·ª•ng
            1. Ng∆∞·ªùi lao ƒë·ªông l√† ng∆∞·ªùi t·ª´ ƒë·ªß 15 tu·ªïi tr·ªü l√™n, c√≥ kh·∫£ nƒÉng lao ƒë·ªông.
            2. Ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông l√† doanh nghi·ªáp, c∆° quan, t·ªï ch·ª©c, c√° nh√¢n c√≥ thu√™ m∆∞·ªõn, s·ª≠ d·ª•ng lao ƒë·ªông.
            """,
            "legal_domain": "lao_dong",
            "document_type": "bo_luat", 
            "issuing_authority": "quoc_hoi",
            "effective_date": "2021-01-01"
        }
    ]
    
    return sample_documents


def demonstrate_service_initialization():
    """
    Minh h·ªça kh·ªüi t·∫°o PineconeService
    Demonstrate PineconeService initialization
    """
    logger.info("=== DEMO: Kh·ªüi t·∫°o PineconeService ===")
    
    try:
        # Method 1: T·∫°o t·ª´ environment variables
        logger.info("1. T·∫°o service t·ª´ environment variables...")
        # service = PineconeServiceFactory.create_from_env()
        
        # Method 2: T·∫°o tr·ª±c ti·∫øp v·ªõi parameters (cho demo)
        logger.info("2. T·∫°o service v·ªõi parameters tr·ª±c ti·∫øp...")
        service = PineconeService(
            api_key=os.getenv("PINECONE_API_KEY", "demo-key"),
            environment=os.getenv("PINECONE_ENVIRONMENT", "us-west1-gcp"),
            index_name=os.getenv("PINECONE_INDEX_NAME", "vietnamese-legal-docs-demo"),
            dimension=1536,
            openai_api_key=os.getenv("OPENAI_API_KEY", "demo-openai-key")
        )
        
        logger.info(f"‚úÖ Service ƒë√£ ƒë∆∞·ª£c t·∫°o: {service.index_name}")
        
        # Ki·ªÉm tra health
        logger.info("3. Ki·ªÉm tra health check...")
        health = service.health_check()
        logger.info(f"Health status: {health['status']}")
        
        # Hi·ªÉn th·ªã supported domains
        logger.info("4. C√°c legal domains ƒë∆∞·ª£c h·ªó tr·ª£:")
        domains = service.get_supported_domains()
        for code, name in domains.items():
            logger.info(f"   {code}: {name}")
        
        return service
        
    except PineconeServiceError as e:
        logger.error(f"‚ùå L·ªói PineconeService: {e.message} (Code: {e.error_code})")
        return None
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh√°c: {str(e)}")
        return None


def demonstrate_document_processing():
    """
    Minh h·ªça x·ª≠ l√Ω t√†i li·ªáu ph√°p l√Ω
    Demonstrate legal document processing
    """
    logger.info("\n=== DEMO: X·ª≠ l√Ω t√†i li·ªáu ph√°p l√Ω ===")
    
    try:
        # T·∫°o document processor
        processor = LegalDocumentProcessor(chunk_size=500, chunk_overlap=50)
        
        # L·∫•y d·ªØ li·ªáu m·∫´u
        sample_docs = create_sample_legal_documents()
        processed_documents = []
        
        for doc_data in sample_docs:
            logger.info(f"X·ª≠ l√Ω t√†i li·ªáu: {doc_data['title']}")
            
            # T·∫°o metadata
            metadata = VietnameseLegalMetadataBuilder.build_metadata(
                document_type=doc_data["document_type"],
                title=doc_data["title"],
                legal_domain=doc_data["legal_domain"],
                issuing_authority=doc_data["issuing_authority"],
                effective_date=doc_data["effective_date"]
            )
            
            # X·ª≠ l√Ω t√†i li·ªáu th√†nh chunks
            chunks = processor.process_legal_document(doc_data["content"], metadata)
            processed_documents.extend(chunks)
            
            logger.info(f"   ‚úÖ Chia th√†nh {len(chunks)} chunks")
            
            # Hi·ªÉn th·ªã th√¥ng tin c·∫•u tr√∫c
            structure = processor.extract_legal_structure(doc_data["content"])
            logger.info(f"   üìÑ C·∫•u tr√∫c: {len(structure['chapters'])} ch∆∞∆°ng, "
                       f"{len(structure['articles'])} ƒëi·ªÅu")
        
        logger.info(f"‚úÖ T·ªïng c·ªông x·ª≠ l√Ω {len(processed_documents)} chunks t·ª´ {len(sample_docs)} t√†i li·ªáu")
        return processed_documents
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói x·ª≠ l√Ω t√†i li·ªáu: {str(e)}")
        return []


def demonstrate_metadata_building():
    """
    Minh h·ªça x√¢y d·ª±ng metadata
    Demonstrate metadata building
    """
    logger.info("\n=== DEMO: X√¢y d·ª±ng metadata ===")
    
    try:
        # Test metadata builder
        logger.info("1. T·∫°o metadata t·ª´ th√¥ng tin c∆° b·∫£n...")
        metadata = VietnameseLegalMetadataBuilder.build_metadata(
            document_type="bo_luat",
            title="B·ªô lu·∫≠t D√¢n s·ª± 2015",
            legal_domain="dan_su",
            issuing_authority="quoc_hoi",
            article_number="123",
            chapter="V",
            effective_date="2017-01-01"
        )
        
        logger.info(f"   üìã Title: {metadata.title}")
        logger.info(f"   üèõÔ∏è Authority: {metadata.issuing_authority}")
        logger.info(f"   üìë Article: {metadata.article_number}")
        logger.info(f"   üìÖ Effective: {metadata.effective_date}")
        
        # Test extraction from title
        logger.info("2. Tr√≠ch xu·∫•t metadata t·ª´ ti√™u ƒë·ªÅ...")
        title = "Ngh·ªã ƒë·ªãnh s·ªë 123/2020/Nƒê-CP v·ªÅ qu·∫£n l√Ω thu·∫ø"
        extracted = VietnameseLegalMetadataBuilder.extract_metadata_from_title(title)
        logger.info(f"   üìù Extracted: {extracted}")
        
        # Test validation
        logger.info("3. Ki·ªÉm tra validation...")
        valid_domain = VietnameseLegalMetadataBuilder.validate_legal_domain("dan_su")
        invalid_domain = VietnameseLegalMetadataBuilder.validate_legal_domain("invalid")
        logger.info(f"   ‚úÖ 'dan_su' valid: {valid_domain}")
        logger.info(f"   ‚ùå 'invalid' valid: {invalid_domain}")
        
        # Show supported types
        logger.info("4. C√°c lo·∫°i t√†i li·ªáu ƒë∆∞·ª£c h·ªó tr·ª£:")
        doc_types = VietnameseLegalMetadataBuilder.get_supported_document_types()
        for code, name in doc_types.items():
            logger.info(f"   {code}: {name}")
        
        return metadata
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói x√¢y d·ª±ng metadata: {str(e)}")
        return None


def demonstrate_search_simulation():
    """
    Minh h·ªça m√¥ ph·ªèng t√¨m ki·∫øm (kh√¥ng c·∫ßn Pinecone th·∫≠t)
    Demonstrate search simulation (without real Pinecone)
    """
    logger.info("\n=== DEMO: M√¥ ph·ªèng t√¨m ki·∫øm ===")
    
    try:
        # T·∫°o mock search results
        mock_results = [
            VectorSearchResult(
                id="doc1_chunk_0",
                score=0.95,
                metadata={
                    "title": "B·ªô lu·∫≠t D√¢n s·ª± 2015",
                    "legal_domain": "dan_su",
                    "article_number": "1",
                    "chapter": "I"
                },
                content="B·ªô lu·∫≠t n√†y quy ƒë·ªãnh v·ªÅ quan h·ªá d√¢n s·ª±...",
                legal_domain="dan_su",
                article_number="1",
                citation="B·ªô lu·∫≠t D√¢n s·ª± 2015, ƒêi·ªÅu 1, Ch∆∞∆°ng I"
            ),
            VectorSearchResult(
                id="doc1_chunk_1", 
                score=0.87,
                metadata={
                    "title": "B·ªô lu·∫≠t D√¢n s·ª± 2015",
                    "legal_domain": "dan_su",
                    "article_number": "2"
                },
                content="Nguy√™n t·∫Øc c∆° b·∫£n c·ªßa ph√°p lu·∫≠t d√¢n s·ª±...",
                legal_domain="dan_su",
                article_number="2",
                citation="B·ªô lu·∫≠t D√¢n s·ª± 2015, ƒêi·ªÅu 2"
            )
        ]
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
        query = "quan h·ªá d√¢n s·ª± l√† g√¨?"
        logger.info(f"üîç Query: '{query}'")
        logger.info(f"üìä T√¨m th·∫•y {len(mock_results)} k·∫øt qu·∫£:")
        
        for i, result in enumerate(mock_results, 1):
            logger.info(f"   {i}. Score: {result.score:.2f}")
            logger.info(f"      üìÑ {result.citation}")
            logger.info(f"      üìù {result.content[:100]}...")
            logger.info(f"      üè∑Ô∏è Domain: {result.legal_domain}")
        
        return mock_results
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói m√¥ ph·ªèng t√¨m ki·∫øm: {str(e)}")
        return []


def main():
    """
    Ch·∫°y demo ch√≠nh
    Run main demo
    """
    logger.info("üöÄ B·∫Øt ƒë·∫ßu Demo PineconeService cho Vietnamese Legal AI Chatbot")
    logger.info("=" * 70)
    
    # Setup environment
    setup_environment()
    
    # 1. Demo kh·ªüi t·∫°o service
    service = demonstrate_service_initialization()
    
    # 2. Demo x·ª≠ l√Ω t√†i li·ªáu
    processed_docs = demonstrate_document_processing()
    
    # 3. Demo x√¢y d·ª±ng metadata
    metadata = demonstrate_metadata_building()
    
    # 4. Demo m√¥ ph·ªèng t√¨m ki·∫øm
    search_results = demonstrate_search_simulation()
    
    # Summary
    logger.info("\n" + "=" * 70)
    logger.info("üìä T√ìNG K·∫æT DEMO:")
    logger.info(f"‚úÖ Service initialization: {'Th√†nh c√¥ng' if service else 'Th·∫•t b·∫°i'}")
    logger.info(f"‚úÖ Document processing: {len(processed_docs)} chunks processed")
    logger.info(f"‚úÖ Metadata building: {'Th√†nh c√¥ng' if metadata else 'Th·∫•t b·∫°i'}")
    logger.info(f"‚úÖ Search simulation: {len(search_results)} results")
    
    logger.info("\nüéâ Demo ho√†n th√†nh!")
    logger.info("üí° ƒê·ªÉ s·ª≠ d·ª•ng th·ª±c t·∫ø, c·∫ßn cung c·∫•p:")
    logger.info("   - PINECONE_API_KEY")
    logger.info("   - OPENAI_API_KEY") 
    logger.info("   - PINECONE_ENVIRONMENT")
    logger.info("   - C√†i ƒë·∫∑t dependencies: pip install pinecone-client openai langchain")


if __name__ == "__main__":
    main()
