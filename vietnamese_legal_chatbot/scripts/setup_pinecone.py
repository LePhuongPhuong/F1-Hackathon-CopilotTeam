"""
Pinecone Setup Script for Vietnamese Legal AI Chatbot
Script Thi·∫øt l·∫≠p Pinecone cho Chatbot AI Ph√°p l√Ω Vi·ªát Nam

Initialize Pinecone index and load initial Vietnamese legal documents.
Kh·ªüi t·∫°o ch·ªâ m·ª•c Pinecone v√† t·∫£i t√†i li·ªáu ph√°p l√Ω Vi·ªát Nam ban ƒë·∫ßu.
"""

import os
import sys
import logging
from pathlib import Path
from typing import List, Dict, Any

# Add app directory to Python path
sys.path.append(str(Path(__file__).parent.parent))

# Implemented imports
import pinecone
from app.utils.demo_config import demo_settings
from app.services.pinecone_service import PineconeService

def setup_logging():
    """Setup logging for setup script"""
    # Create logs directory if it doesn't exist
    logs_dir = Path('logs')
    logs_dir.mkdir(exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/setup_pinecone.log'),
            logging.StreamHandler()
        ]
    )

def validate_environment():
    """Validate required environment variables"""
    required_vars = [
        'OPENAI_API_KEY',
        'PINECONE_API_KEY', 
        'PINECONE_ENVIRONMENT',
        'PINECONE_INDEX_NAME'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logging.error(f"Missing environment variables: {missing_vars}")
        logging.error("Please set these variables in .env file or environment")
        return False
    
    return True

def create_pinecone_index():
    """Create Pinecone index with optimal configuration for Vietnamese legal docs"""
    try:
        logging.info("Creating Pinecone index...")
        
        # Initialize Pinecone service
        pinecone_service = PineconeService(
            api_key=demo_settings.pinecone_api_key,
            environment=demo_settings.pinecone_environment,
            index_name=demo_settings.pinecone_index_name,
            openai_api_key=demo_settings.openai_embedding_api_key
        )
        
        # Check if index already exists
        if pinecone_service.index_exists():
            logging.info(f"Index {demo_settings.pinecone_index_name} already exists")
            return True
        
        # Create index with optimal settings for Vietnamese legal documents
        success = pinecone_service.create_index(
            dimension=1536,  # OpenAI text-embedding-3-small dimension
            metric='cosine'
        )
        
        if success:
            logging.info(f"Successfully created Pinecone index: {demo_settings.pinecone_index_name}")
            return True
        else:
            logging.error("Failed to create Pinecone index")
            return False
        
    except Exception as e:
        logging.error(f"Failed to create Pinecone index: {e}")
        return False

def load_sample_legal_documents():
    """Load sample Vietnamese legal documents into Pinecone"""
    try:
        logging.info("Loading sample Vietnamese legal documents...")
        
        # Get sample documents
        sample_documents = get_sample_documents()
        
        # Initialize Pinecone service
        pinecone_service = PineconeService(
            api_key=demo_settings.pinecone_api_key,
            environment=demo_settings.pinecone_environment,
            index_name=demo_settings.pinecone_index_name,
            openai_api_key=demo_settings.openai_embedding_api_key
        )
        
        processed_count = 0
        for doc_info in sample_documents:
            try:
                logging.info(f"Processing document: {doc_info['title']}")
                
                # Create document structure for Pinecone
                document_data = {
                    'id': f"doc_{processed_count}",
                    'text': doc_info['content'],
                    'metadata': doc_info['metadata']
                }
                
                # Upload to Pinecone
                success = pinecone_service.upsert_documents([document_data])
                
                if success:
                    processed_count += 1
                    logging.info(f"Successfully uploaded: {doc_info['title']}")
                
            except Exception as e:
                logging.error(f"Failed to process document {doc_info['title']}: {e}")
        
        logging.info(f"Successfully loaded {processed_count} sample documents")
        return True
        
    except Exception as e:
        logging.error(f"Failed to load sample documents: {e}")
        return False

def get_sample_documents() -> List[Dict[str, Any]]:
    """Get sample Vietnamese legal documents for initial setup"""
    return [
        {
            'title': 'B·ªô lu·∫≠t D√¢n s·ª± 2015 - ƒêi·ªÅu 1',
            'content': '''
            ƒêi·ªÅu 1. Ph·∫°m vi ƒëi·ªÅu ch·ªânh
            B·ªô lu·∫≠t n√†y quy ƒë·ªãnh v·ªÅ quan h·ªá d√¢n s·ª± ph√°t sinh trong c√°c lƒ©nh v·ª±c 
            sau ƒë√¢y:
            1. Quan h·ªá nh√¢n th√¢n;
            2. Quan h·ªá t√†i s·∫£n;
            3. Quan h·ªá d√¢n s·ª± trong ho·∫°t ƒë·ªông kinh doanh, th∆∞∆°ng m·∫°i;
            4. Quan h·ªá d√¢n s·ª± kh√°c.
            ''',
            'metadata': {
                'legal_domain': 'dan_su',
                'document_type': 'bo_luat',
                'article_number': '1',
                'law_name': 'B·ªô lu·∫≠t D√¢n s·ª± 2015',
                'effective_date': '01/01/2017'
            }
        },
        {
            'title': 'B·ªô lu·∫≠t Lao ƒë·ªông 2019 - ƒêi·ªÅu 2',
            'content': '''
            ƒêi·ªÅu 2. ƒê·ªëi t∆∞·ª£ng √°p d·ª•ng
            1. B·ªô lu·∫≠t n√†y √°p d·ª•ng ƒë·ªëi v·ªõi ng∆∞·ªùi lao ƒë·ªông, ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông 
            trong quan h·ªá lao ƒë·ªông; c∆° quan, t·ªï ch·ª©c, c√° nh√¢n c√≥ li√™n quan ƒë·∫øn 
            quan h·ªá lao ƒë·ªông.
            2. Tr∆∞·ªùng h·ª£p ƒëi·ªÅu ∆∞·ªõc qu·ªëc t·∫ø m√† C·ªông h√≤a x√£ h·ªôi ch·ªß nghƒ©a Vi·ªát Nam 
            l√† th√†nh vi√™n c√≥ quy ƒë·ªãnh kh√°c v·ªõi quy ƒë·ªãnh c·ªßa B·ªô lu·∫≠t n√†y th√¨ √°p d·ª•ng 
            quy ƒë·ªãnh c·ªßa ƒëi·ªÅu ∆∞·ªõc qu·ªëc t·∫ø ƒë√≥.
            ''',
            'metadata': {
                'legal_domain': 'lao_dong',
                'document_type': 'bo_luat',
                'article_number': '2',
                'law_name': 'B·ªô lu·∫≠t Lao ƒë·ªông 2019',
                'effective_date': '01/01/2021'
            }
        },
        {
            'title': 'Lu·∫≠t Doanh nghi·ªáp 2020 - ƒêi·ªÅu 4',
            'content': '''
            ƒêi·ªÅu 4. Quy·ªÅn th√†nh l·∫≠p doanh nghi·ªáp
            1. C√° nh√¢n, t·ªï ch·ª©c c√≥ quy·ªÅn th√†nh l·∫≠p doanh nghi·ªáp theo quy ƒë·ªãnh 
            c·ªßa Lu·∫≠t n√†y v√† ph√°p lu·∫≠t c√≥ li√™n quan.
            2. Kh√¥ng ai ƒë∆∞·ª£c c·∫£n tr·ªü vi·ªác th√†nh l·∫≠p doanh nghi·ªáp h·ª£p ph√°p c·ªßa 
            c√° nh√¢n, t·ªï ch·ª©c.
            3. Vi·ªác th√†nh l·∫≠p doanh nghi·ªáp ph·∫£i tu√¢n th·ªß quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t 
            v·ªÅ ƒëi·ªÅu ki·ªán ƒë·∫ßu t∆∞ kinh doanh.
            ''',
            'metadata': {
                'legal_domain': 'thuong_mai',
                'document_type': 'luat',
                'article_number': '4',
                'law_name': 'Lu·∫≠t Doanh nghi·ªáp 2020',
                'effective_date': '01/01/2021'
            }
        }
    ]

def test_pinecone_connection():
    """Test Pinecone connection and basic operations"""
    try:
        logging.info("Testing Pinecone connection...")
        
        # Initialize Pinecone service
        pinecone_service = PineconeService(
            api_key=demo_settings.pinecone_api_key,
            environment=demo_settings.pinecone_environment,
            index_name=demo_settings.pinecone_index_name,
            openai_api_key=demo_settings.openai_embedding_api_key
        )
        
        # Test basic operations
        stats = pinecone_service.get_index_stats()
        logging.info(f"Index stats: {stats}")
        
        # Test search with sample query
        results = pinecone_service.search_similar_documents(
            query="quy·ªÅn th√†nh l·∫≠p doanh nghi·ªáp",
            top_k=3
        )
        logging.info(f"Test search returned {len(results)} results")
        
        logging.info("Pinecone connection test successful")
        return True
        
    except Exception as e:
        logging.error(f"Pinecone connection test failed: {e}")
        return False

def main():
    """Main setup function"""
    print("üöÄ Vietnamese Legal AI Chatbot - Pinecone Setup")
    print("=" * 60)
    
    # Setup logging
    setup_logging()
    
    # Validate environment
    if not validate_environment():
        logging.error("‚ùå Environment validation failed")
        sys.exit(1)
    
    logging.info("‚úÖ Environment validation passed")
    
    # Create Pinecone index
    if not create_pinecone_index():
        logging.error("‚ùå Failed to create Pinecone index")
        sys.exit(1)
    
    logging.info("‚úÖ Pinecone index created successfully")
    
    # Load sample documents
    if not load_sample_legal_documents():
        logging.error("‚ùå Failed to load sample documents")
        sys.exit(1)
    
    logging.info("‚úÖ Sample documents loaded successfully")
    
    # Test connection
    if not test_pinecone_connection():
        logging.error("‚ùå Pinecone connection test failed")
        sys.exit(1)
    
    logging.info("‚úÖ Pinecone connection test passed")
    
    print("\nüéâ Pinecone setup completed successfully!")
    print("Your Vietnamese Legal AI Chatbot is ready to use.")
    print("\nNext steps:")
    print("1. Run the FastAPI backend: python app/main.py")
    print("2. Run the Streamlit frontend: streamlit run app/streamlit_app.py")

if __name__ == "__main__":
    main()
