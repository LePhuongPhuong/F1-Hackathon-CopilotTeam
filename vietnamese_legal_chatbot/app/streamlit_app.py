"""
Streamlit Frontend for Vietnamese Legal AI Chatbot
Frontend Streamlit cho Chatbot AI Ph√°p l√Ω Vi·ªát Nam

Interactive web interface for Vietnamese legal consultation.
Giao di·ªán web t∆∞∆°ng t√°c cho t∆∞ v·∫•n ph√°p l√Ω Vi·ªát Nam.
"""

import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional
import base64
import io
from pathlib import Path

# Custom CSS for Vietnamese Cultural Design
def load_css():
    """Load Vietnamese cultural CSS styling"""
    css = """
    <style>
    /* Import Vietnamese-optimized fonts */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Vietnamese Cultural Color Palette */
    :root {
        --vn-red-primary: #DA020E;
        --vn-yellow-gold: #FFDF00;
        --vn-blue-government: #004B87;
        --vn-green-nature: #228B22;
        --vn-lotus-pink: #FDB5C8;
        --vn-bamboo-green: #9CAF88;
        --vn-legal-navy: #1E3A8A;
        --vn-justice-gold: #D4AF37;
        --vn-peace-white: #FFFEF7;
    }
    
    /* Main App Styling */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 1440px;
    }
    
    /* Vietnamese Government Header */
    .government-header {
        background: linear-gradient(135deg, var(--vn-blue-government) 0%, var(--vn-legal-navy) 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 12px rgba(0, 75, 135, 0.3);
    }
    
    .national-identity {
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .country-name {
        font-size: 1.2rem;
        font-weight: 700;
        letter-spacing: 0.1em;
        margin-bottom: 0.5rem;
    }
    
    .national-motto {
        font-size: 1rem;
        font-style: italic;
        opacity: 0.9;
    }
    
    .system-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--vn-justice-gold);
        text-align: center;
        margin-top: 1rem;
    }
    
    /* Legal Categories Styling */
    .legal-category {
        background: linear-gradient(90deg, rgba(218, 2, 14, 0.05) 0%, rgba(255, 255, 255, 0) 100%);
        border-left: 4px solid var(--vn-red-primary);
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 0 8px 8px 0;
        transition: all 0.3s ease;
    }
    
    .legal-category:hover {
        background: linear-gradient(90deg, rgba(218, 2, 14, 0.1) 0%, rgba(255, 255, 255, 0) 100%);
        transform: translateX(5px);
    }
    
    /* Chat Message Styling */
    .chat-message {
        background: white;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
        border: 1px solid #E2E8F0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .user-message {
        background: linear-gradient(135deg, #F0F9FF 0%, #E0F2FE 100%);
        border-left: 4px solid var(--vn-blue-government);
    }
    
    .ai-message {
        background: linear-gradient(135deg, #F8FAFC 0%, #F1F5F9 100%);
        border-left: 4px solid var(--vn-green-nature);
    }
    
    /* Legal Citation Styling */
    .legal-citation {
        background: var(--vn-peace-white);
        border: 1px solid var(--vn-justice-gold);
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .document-title {
        color: var(--vn-legal-navy);
        font-weight: 600;
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }
    
    .article-reference {
        color: var(--vn-red-primary);
        font-weight: 500;
    }
    
    /* Vietnamese Typography */
    .vietnamese-text {
        font-family: 'Inter', 'Segoe UI', sans-serif;
        line-height: 1.7;
        letter-spacing: 0.01em;
        word-spacing: 0.02em;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .main .block-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }
    }
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

def main():
    """Main Streamlit application with Vietnamese localization"""
    
    # Page configuration
    st.set_page_config(
        page_title="Chatbot AI Ph√°p l√Ω Vi·ªát Nam",
        page_icon="‚öñÔ∏è",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'https://legal.gov.vn/help',
            'Report a bug': 'https://legal.gov.vn/report',
            'About': "H·ªá th·ªëng T∆∞ v·∫•n Ph√°p l√Ω AI - Phi√™n b·∫£n 2.0"
        }
    )
    
    # Load Vietnamese cultural CSS
    load_css()
    
    # Render Vietnamese Government Header
    render_government_header()
    
    # Create three-column layout (matching design mockups)
    left_sidebar, main_content, right_sidebar = st.columns([1, 2, 1])
    
    with left_sidebar:
        render_legal_categories()
        render_recent_queries()
        render_quick_actions()
    
    with main_content:
        render_chat_interface()
    
    with right_sidebar:
        render_legal_references()
    
    # Render footer
    render_footer()

def render_government_header():
    """Render Vietnamese Government compliant header"""
    header_html = """
    <div class="government-header">
        <div class="national-identity">
            <h1 class="country-name">C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM</h1>
            <p class="national-motto">ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c</p>
        </div>
        <div class="authority-section">
            <h2 style="text-align: center; margin: 0.5rem 0; font-size: 1.3rem;">B·ªò T∆Ø PH√ÅP</h2>
            <p style="text-align: center; margin: 0; opacity: 0.9;">C·ª•c Ph√°p ch·∫ø</p>
        </div>
        <h1 class="system-title">üèõÔ∏è H·ªá th·ªëng T∆∞ v·∫•n Ph√°p l√Ω AI</h1>
        <p style="text-align: center; color: var(--vn-justice-gold); margin-top: 0.5rem;">
            Phi√™n b·∫£n 2.0 - NƒÉm 2025
        </p>
    </div>
    """
    st.markdown(header_html, unsafe_allow_html=True)
    
    # Compliance notice
    st.info("üõ°Ô∏è **H·ªá th·ªëng tu√¢n th·ªß ti√™u chu·∫©n Ch√≠nh ph·ªß** - ƒê∆∞·ª£c ch·ª©ng nh·∫≠n b·ªüi B·ªô TT&TT theo Th√¥ng t∆∞ 20/2018/TT-BTTTT v·ªÅ an to√†n th√¥ng tin m·∫°ng qu·ªëc gia.")

def render_legal_categories():
    """Render legal categories sidebar"""
    st.markdown("### ‚öñÔ∏è Lƒ©nh v·ª±c Ph√°p l√Ω")
    
    legal_domains = {
        "dan_su": {
            "name": "Lu·∫≠t D√¢n s·ª±", 
            "icon": "üë•",
            "subcategories": ["Quy·ªÅn s·ªü h·ªØu", "H·ª£p ƒë·ªìng", "Nghƒ©a v·ª• d√¢n s·ª±", "Th·ª´a k·∫ø"]
        },
        "hinh_su": {
            "name": "Lu·∫≠t H√¨nh s·ª±", 
            "icon": "üõ°Ô∏è",
            "subcategories": ["T·ªôi ph·∫°m", "H√¨nh ph·∫°t", "Th·ªß t·ª•c t·ªë t·ª•ng"]
        },
        "lao_dong": {
            "name": "Lu·∫≠t Lao ƒë·ªông", 
            "icon": "üíº",
            "subcategories": ["H·ª£p ƒë·ªìng lao ƒë·ªông", "Quy·ªÅn lao ƒë·ªông", "Tranh ch·∫•p", "B·∫£o hi·ªÉm XH"]
        },
        "thuong_mai": {
            "name": "Lu·∫≠t Th∆∞∆°ng m·∫°i", 
            "icon": "üè¢",
            "subcategories": ["Kinh doanh", "Th∆∞∆°ng m·∫°i", "C·∫°nh tranh"]
        },
        "gia_dinh": {
            "name": "Lu·∫≠t Gia ƒë√¨nh", 
            "icon": "‚ù§Ô∏è",
            "subcategories": ["H√¥n nh√¢n", "Ly h√¥n", "Quy·ªÅn tr·∫ª em", "Nh·∫≠n con nu√¥i"]
        }
    }
    
    for domain_key, domain_info in legal_domains.items():
        with st.expander(f"{domain_info['icon']} {domain_info['name']}", 
                        expanded=(st.session_state.current_legal_domain == domain_key)):
            for subcategory in domain_info['subcategories']:
                if st.button(f"üìñ {subcategory}", key=f"sub_{domain_key}_{subcategory}"):
                    st.session_state.current_legal_domain = domain_key
                    st.rerun()

def render_recent_queries():
    """Render recent queries section"""
    st.markdown("### üïí Truy v·∫•n g·∫ßn ƒë√¢y")
    
    recent_queries = [
        {"text": "Th·ªß t·ª•c ly h√¥n thu·∫≠n t√¨nh", "time": "2 gi·ªù tr∆∞·ªõc"},
        {"text": "Quy·ªÅn l·ª£i ng∆∞·ªùi lao ƒë·ªông", "time": "1 ng√†y tr∆∞·ªõc"},
        {"text": "H·ª£p ƒë·ªìng mua b√°n nh√†", "time": "3 ng√†y tr∆∞·ªõc"}
    ]
    
    for query in recent_queries:
        st.markdown(f"""
        <div class="legal-category">
            <p style="margin: 0; font-weight: 500;">{query['text']}</p>
            <small style="color: #64748B;">{query['time']}</small>
        </div>
        """, unsafe_allow_html=True)
    
    if st.button("üìú Xem t·∫•t c·∫£ l·ªãch s·ª≠"):
        st.session_state.show_history = True

def render_quick_actions():
    """Render quick actions section"""
    st.markdown("### ‚ö° H√†nh ƒë·ªông nhanh")
    
    if st.button("‚ûï ƒê·∫∑t c√¢u h·ªèi m·ªõi", use_container_width=True):
        st.session_state.new_question = True
        
    if st.button(" T√¨m lu·∫≠t li√™n quan", use_container_width=True):
        st.session_state.search_laws = True

def render_chat_interface():
    """Render main chat interface with Vietnamese styling"""
    st.markdown("### üí¨ T∆∞ v·∫•n Ph√°p l√Ω AI")
    
    # Regional selector
    st.markdown("**üåè Ch·ªçn v√πng mi·ªÅn:**")
    region_options = {
        "north": "üèîÔ∏è Mi·ªÅn B·∫Øc",
        "central": "üèñÔ∏è Mi·ªÅn Trung", 
        "south": "üåæ Mi·ªÅn Nam",
        "special_zones": "üè≠ Khu Kinh t·∫ø ƒê·∫∑c bi·ªát"
    }
    
    selected_region = st.selectbox(
        "V√πng mi·ªÅn",
        options=list(region_options.keys()),
        format_func=lambda x: region_options[x],
        index=list(region_options.keys()).index(st.session_state.user_region),
        label_visibility="collapsed"
    )
    st.session_state.user_region = selected_region
    
    # Display chat history
    chat_container = st.container()
    with chat_container:
        for i, message in enumerate(st.session_state.chat_history):
            if message['role'] == 'user':
                st.markdown(f"""
                <div class="chat-message user-message vietnamese-text">
                    <strong>üë§ B·∫°n:</strong><br>
                    {message['content']}
                    <br><small style="color: #64748B;">{message['timestamp']}</small>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message ai-message vietnamese-text">
                    <strong>ü§ñ AI Ph√°p l√Ω:</strong><br>
                    {message['content']}
                    <br><small style="color: #64748B;">{message['timestamp']}</small>
                </div>
                """, unsafe_allow_html=True)
                
                # Display legal citations if available
                if 'citations' in message:
                    render_legal_citations(message['citations'])
    
    # Chat input
    st.markdown("---")
    user_input = st.text_area(
        "üí≠ Nh·∫≠p c√¢u h·ªèi ph√°p l√Ω c·ªßa b·∫°n:",
        placeholder="V√≠ d·ª•: T√¥i mu·ªën bi·∫øt v·ªÅ th·ªß t·ª•c ly h√¥n thu·∫≠n t√¨nh...",
        height=100,
        key="user_input"
    )
    
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("üì§ G·ª≠i c√¢u h·ªèi", use_container_width=True):
            if user_input.strip():
                process_user_question(user_input)
                st.rerun()
    
    with col2:
        if st.button("üîÑ L√†m m·ªõi", use_container_width=True):
            st.session_state.chat_history = []
            st.rerun()
    
    with col3:
        if st.button("üì• Xu·∫•t l·ªãch s·ª≠", use_container_width=True):
            export_chat_history()

def render_legal_references():
    """Render legal references sidebar"""
    st.markdown("### üìñ Tham kh·∫£o Ph√°p l√Ω")
    
    references = [
        {
            "title": "B·ªô lu·∫≠t D√¢n s·ª± 2015",
            "type": "Lu·∫≠t",
            "status": "Hi·ªáu l·ª±c"
        },
        {
            "title": "Lu·∫≠t An to√†n VSLD 2015", 
            "type": "Lu·∫≠t",
            "status": "Hi·ªáu l·ª±c"
        },
        {
            "title": "Ngh·ªã ƒë·ªãnh 44/2016/Nƒê-CP",
            "type": "Ngh·ªã ƒë·ªãnh", 
            "status": "Hi·ªáu l·ª±c"
        }
    ]
    
    for ref in references:
        status_color = "üü¢" if ref['status'] == "Hi·ªáu l·ª±c" else "üî¥"
        st.markdown(f"""
        <div class="legal-citation">
            <p class="document-title">{ref['title']}</p>
            <small>{ref['type']} ‚Ä¢ {status_color} {ref['status']}</small>
        </div>
        """, unsafe_allow_html=True)

def render_footer():
    """Render Vietnamese compliant footer"""
    st.markdown("---")
    
    footer_html = """
    <div style="background: #1E3A8A; color: white; padding: 1rem; border-radius: 8px; text-align: center; margin-top: 2rem;">
        <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">
            <div>
                <small>¬© 2025 B·ªô T∆∞ ph√°p Vi·ªát Nam - H·ªá th·ªëng AI Ph√°p l√Ω</small>
            </div>
            <div>
                <small>Phi√™n b·∫£n 2.0 | Li√™n h·ªá: legal-ai@moj.gov.vn</small>
            </div>
        </div>
        <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255,255,255,0.3);">
            <small>
                ‚ö†Ô∏è <strong>Tuy√™n b·ªë:</strong> Th√¥ng tin t·ª´ AI ch·ªâ mang t√≠nh tham kh·∫£o. 
                Vui l√≤ng tham kh·∫£o √Ω ki·∫øn chuy√™n gia ph√°p l√Ω cho c√°c v·∫•n ƒë·ªÅ ph·ª©c t·∫°p.
            </small>
        </div>
    </div>
    """
    st.markdown(footer_html, unsafe_allow_html=True)

def render_legal_citations(citations: List[Dict]):
    """Render legal citations with Vietnamese formatting"""
    st.markdown("**üìã C∆° s·ªü ph√°p l√Ω:**")
    
    for citation in citations:
        citation_html = f"""
        <div class="legal-citation">
            <div class="document-title">{citation.get('title', 'N/A')}</div>
            <div class="article-reference">
                {citation.get('article', '')} {citation.get('clause', '')} {citation.get('point', '')}
            </div>
            <p style="margin: 0.5rem 0; font-style: italic;">
                "{citation.get('content', '')}"
            </p>
            <small style="color: #64748B;">
                {citation.get('authority', '')} ‚Ä¢ {citation.get('date', '')}
            </small>
        </div>
        """
        st.markdown(citation_html, unsafe_allow_html=True)

def process_user_question(question: str):
    """Process user question and get AI response"""
    timestamp = datetime.now().strftime("%H:%M - %d/%m/%Y")
    
    # Add user message to history
    st.session_state.chat_history.append({
        'role': 'user',
        'content': question,
        'timestamp': timestamp
    })
    
    # Simulate AI response (replace with actual API call)
    ai_response = get_ai_response(question)
    
    st.session_state.chat_history.append({
        'role': 'assistant', 
        'content': ai_response['content'],
        'timestamp': timestamp,
        'citations': ai_response.get('citations', [])
    })

def get_ai_response(question: str) -> Dict:
    """Get AI response from FastAPI backend"""
    # TODO: Replace with actual API call to FastAPI backend
    
    # Simulated response for demo
    demo_response = {
        'content': f"""
        D·ª±a tr√™n c√¢u h·ªèi c·ªßa b·∫°n: "{question}"
        
        üîç **Ph√¢n t√≠ch ph√°p l√Ω:**
        Theo quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t Vi·ªát Nam hi·ªán h√†nh, t√¥i xin cung c·∫•p th√¥ng tin nh∆∞ sau:
        
        üìã **C∆° s·ªü ph√°p l√Ω ch√≠nh:**
        - B·ªô lu·∫≠t D√¢n s·ª± 2015
        - Lu·∫≠t H√¥n nh√¢n v√† Gia ƒë√¨nh 2014
        
        ‚öñÔ∏è **H∆∞·ªõng d·∫´n c·ª• th·ªÉ:**
        1. C·∫ßn tu√¢n th·ªß c√°c th·ªß t·ª•c theo quy ƒë·ªãnh
        2. Chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß h·ªì s∆° c·∫ßn thi·∫øt
        3. N·ªôp h·ªì s∆° t·∫°i c∆° quan c√≥ th·∫©m quy·ªÅn
        
        ‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:**
        ƒê√¢y l√† th√¥ng tin tham kh·∫£o. Khuy·∫øn ngh·ªã tham kh·∫£o lu·∫≠t s∆∞ cho t∆∞ v·∫•n chuy√™n s√¢u.
        """,
        'citations': [
            {
                'title': 'B·ªô lu·∫≠t D√¢n s·ª± s·ªë 91/2015/QH13',
                'article': 'ƒêi·ªÅu 15',
                'clause': 'Kho·∫£n 1',
                'content': 'M·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ quy·ªÅn b√¨nh ƒë·∫≥ng trong vi·ªác h∆∞·ªüng quy·ªÅn d√¢n s·ª±...',
                'authority': 'Qu·ªëc h·ªôi',
                'date': '24/11/2015'
            }
        ]
    }
    
    return demo_response

def export_chat_history():
    """Export chat history to file"""
    if st.session_state.chat_history:
        # Create export content
        export_content = "L·ªäCH S·ª¨ T∆Ø V·∫§N PH√ÅP L√ù AI\n"
        export_content += "=" * 50 + "\n\n"
        
        for message in st.session_state.chat_history:
            role = "NG∆Ø·ªúI D√ôNG" if message['role'] == 'user' else "AI PH√ÅP L√ù"
            export_content += f"{role} ({message['timestamp']}):\n"
            export_content += f"{message['content']}\n\n"
        
        st.download_button(
            label="üì• T·∫£i xu·ªëng l·ªãch s·ª≠",
            data=export_content,
            file_name=f"tu_van_phap_ly_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
            mime="text/plain"
        )
    else:
        st.warning("Ch∆∞a c√≥ l·ªãch s·ª≠ ƒë·ªÉ xu·∫•t!")

def render_sidebar():
    """Render sidebar with legal domains and options"""
    # TODO: Implement sidebar
    pass

def render_chat_history():
    """Render chat history panel"""
    # TODO: Implement chat history
    pass

def render_export_options():
    """Render export functionality"""
    # TODO: Implement export options
    pass

if __name__ == "__main__":
    main()
